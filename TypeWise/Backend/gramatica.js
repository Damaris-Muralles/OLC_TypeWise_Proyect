/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,11],$V2=[1,12],$V3=[1,13],$V4=[1,14],$V5=[1,15],$V6=[1,16],$V7=[1,17],$V8=[1,18],$V9=[2,5,14,15,20,28,65,66,67,68],$Va=[2,10],$Vb=[1,24],$Vc=[1,27],$Vd=[2,105],$Ve=[1,42],$Vf=[1,44],$Vg=[1,37],$Vh=[1,38],$Vi=[1,39],$Vj=[1,40],$Vk=[1,41],$Vl=[1,43],$Vm=[1,49],$Vn=[1,54],$Vo=[2,11],$Vp=[1,55],$Vq=[1,61],$Vr=[8,16,22,23,25],$Vs=[62,63],$Vt=[2,91],$Vu=[1,64],$Vv=[1,63],$Vw=[1,65],$Vx=[1,66],$Vy=[1,67],$Vz=[1,68],$VA=[1,69],$VB=[1,70],$VC=[1,71],$VD=[1,72],$VE=[1,73],$VF=[1,74],$VG=[8,23,25,48,49,50,51,52,53,55,56,57,58,59,60,62,63,76,78],$VH=[1,75],$VI=[1,76],$VJ=[2,90],$VK=[1,79],$VL=[1,80],$VM=[1,81],$VN=[8,23,62,63,78],$VO=[1,86],$VP=[1,88],$VQ=[23,25],$VR=[8,23,25,55,56,57,58,59,60,62,63,76,78],$VS=[1,129],$VT=[1,131],$VU=[1,132],$VV=[1,133],$VW=[1,134],$VX=[1,135],$VY=[1,137],$VZ=[1,136],$V_=[1,138],$V$=[1,139],$V01=[1,140],$V11=[1,149],$V21=[8,23,25,50,51,52,53,55,56,57,58,59,60,62,63,76,78],$V31=[2,14,15,32,65,66,67,68,69,70,72,75,77,79,80,81,82,83],$V41=[1,184],$V51=[2,14,15,32,65,66,67,68,69,70,72,80,81,82,83],$V61=[1,224],$V71=[1,225],$V81=[32,75,77];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"PTCOMA":8,"asignacion":9,"funcion_main":10,"funcion":11,"metodo":12,"tipos":13,"T_BOOLEAN":14,"IDENTIFICADOR":15,"IGUAL":16,"expresion":17,"ternarioop":18,"expresion_logica":19,"T_MAIN":20,"llamada_funcion":21,"PARIZQ":22,"PARDER":23,"expresionllamada":24,"COMA":25,"bloqueinstrucciones":26,"parametrosllamada":27,"T_VOID":28,"bloqueinstruccionesmetodo":29,"LLAVIZQ":30,"instruccionesmetodo":31,"LLAVDER":32,"instruccionesfuncion":33,"instruccionmetodo":34,"instruccionfuncion":35,"sentenciaprint":36,"sentenciacontrolIF":37,"sentenciacontrolswitch":38,"sentenciabreak":39,"incrementoDec":40,"ciclos":41,"retornos":42,"CADENA":43,"ENTERO":44,"DECIMAL":45,"BOOLEANO":46,"CARACTER":47,"MENOS":48,"MAS":49,"POR":50,"DIVIDIDO":51,"POTENCIA":52,"MODULO":53,"expresion_relacional":54,"MAYQUE":55,"MENQUE":56,"MAYIGQUE":57,"MENIGQUE":58,"DOBLEIG":59,"NOIG":60,"expresionescompuestas":61,"AND":62,"OR":63,"NOT":64,"T_INT":65,"T_DOUBLE":66,"T_CHAR":67,"T_STRING":68,"T_PRINT":69,"T_IF":70,"T_ELSE":71,"T_SWITCH":72,"casos":73,"caso_evaluar":74,"T_CASE":75,"DOSPTS":76,"T_DEFAULT":77,"INTERROGACION":78,"T_RETURN":79,"T_BREAK":80,"T_WHILE":81,"T_DO":82,"T_FOR":83,"incializarfor":84,"actualizar":85,"AUMENTO":86,"DECREMENTO":87,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PTCOMA",14:"T_BOOLEAN",15:"IDENTIFICADOR",16:"IGUAL",20:"T_MAIN",22:"PARIZQ",23:"PARDER",25:"COMA",28:"T_VOID",30:"LLAVIZQ",32:"LLAVDER",43:"CADENA",44:"ENTERO",45:"DECIMAL",46:"BOOLEANO",47:"CARACTER",48:"MENOS",49:"MAS",50:"POR",51:"DIVIDIDO",52:"POTENCIA",53:"MODULO",55:"MAYQUE",56:"MENQUE",57:"MAYIGQUE",58:"MENIGQUE",59:"DOBLEIG",60:"NOIG",62:"AND",63:"OR",64:"NOT",65:"T_INT",66:"T_DOUBLE",67:"T_CHAR",68:"T_STRING",69:"T_PRINT",70:"T_IF",71:"T_ELSE",72:"T_SWITCH",75:"T_CASE",76:"DOSPTS",77:"T_DEFAULT",78:"INTERROGACION",79:"T_RETURN",80:"T_BREAK",81:"T_WHILE",82:"T_DO",83:"T_FOR",86:"AUMENTO",87:"DECREMENTO"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[7,1],[7,2],[7,3],[7,3],[7,4],[7,4],[7,4],[9,3],[9,3],[9,3],[10,2],[21,3],[21,4],[24,3],[24,1],[11,4],[11,5],[11,5],[11,7],[12,5],[12,6],[27,3],[27,4],[27,1],[27,2],[29,3],[29,2],[26,3],[26,2],[31,2],[31,1],[33,2],[33,1],[34,2],[34,2],[34,2],[34,2],[34,1],[34,1],[34,1],[34,2],[34,1],[34,1],[35,2],[35,2],[35,2],[35,2],[35,1],[35,1],[35,1],[35,1],[35,2],[35,1],[35,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,2],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,1],[17,1],[54,3],[54,3],[54,3],[54,3],[54,3],[54,3],[19,3],[19,3],[19,2],[19,1],[61,1],[61,1],[13,2],[13,2],[13,2],[13,2],[36,4],[37,7],[37,11],[37,9],[38,7],[73,2],[73,1],[74,4],[74,3],[18,0],[18,5],[42,3],[42,3],[39,2],[41,7],[41,9],[41,11],[84,3],[84,3],[85,3],[85,1],[40,2],[40,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		// cuado se haya reconocido la entrada completa retornamos el AST
		return $$[$0-1];
	
break;
case 2: case 39: case 41:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 24: case 33: case 40: case 42:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 6: case 43: case 44: case 45: case 46: case 50: case 53: case 54: case 55: case 56: case 61: case 77:
 this.$ = $$[$0-1]; 
break;
case 7: case 8: case 47: case 48: case 49: case 51: case 57: case 58: case 59: case 60: case 62: case 78: case 79: case 89: case 90: case 91: case 116:
 this.$ = $$[$0]; 
break;
case 9:
 
					ubicacion = {
						first_line: _$[$0].first_line,
						first_column: _$[$0].first_column
					};
					
					this.$ = instruccionesAPI.parseError(yytext, ubicacion,"No se eseraba  ","Sintactico");
					console.log('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
					// Descartamos el token que generó el error y continuamos el análisis después del token PTCOMA
					 
break;
case 10:
 this.$ = instruccionesAPI.nuevoDeclaracion($$[$0].identificador,$$[$0].tipo, true,$$[$0].linea,$$[$0].columna); 
break;
case 11:
 this.$ = instruccionesAPI.nuevoDeclaracion($$[$0],TIPO_DATO.BOOLEAN, true,_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 12: case 13: case 114:
 this.$ = instruccionesAPI.nuevoDecAsig($$[$0-2].identificador,$$[$0-2].tipo,$$[$0], true,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 14:
 this.$ = instruccionesAPI.nuevoDecAsig($$[$0-2],TIPO_DATO.BOOLEAN,$$[$0], true,_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 15: case 16:
 this.$ = instruccionesAPI.nuevoDecAsig($$[$0-2],TIPO_DATO.BOOLEAN,$$[$0],  true,_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 17: case 18: case 19: case 113: case 115:
 this.$ = instruccionesAPI.nuevoAsignacion($$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 20:
   this.$ = instruccionesAPI.nuevoMain($$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 21:
 this.$ = instruccionesAPI.nuevoLlamadaFuncion($$[$0-2], [],_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 22:
 this.$ = instruccionesAPI.nuevoLlamadaFuncion($$[$0-3], $$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 23: case 31:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 25:
this.$ = instruccionesAPI.nuevaFuncion($$[$0-3].identificador,[],$$[$0],'FUNCION',$$[$0-3].tipo, _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 26:
this.$ = instruccionesAPI.nuevaFuncion($$[$0-4].identificador,$$[$0-2],$$[$0],'FUNCION',$$[$0-4].tipo,_$[$0-4].first_line, _$[$0-4].first_column);
break;
case 27:
this.$ = instruccionesAPI.nuevaFuncion($$[$0-3],[],$$[$0],'FUNCION',$$[$0-4], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 28:
this.$ = instruccionesAPI.nuevaFuncion($$[$0-5],$$[$0-3],$$[$0-1],'FUNCION',$$[$0-6],_$[$0-5].first_line, _$[$0-5].first_column);
break;
case 29:
this.$ = instruccionesAPI.nuevaFuncion($$[$0-3],[],$$[$0],'METODO',$$[$0-4], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 30:
this.$ = instruccionesAPI.nuevaFuncion($$[$0-4],$$[$0-2],$$[$0],'METODO',$$[$0-5],_$[$0-4].first_line, _$[$0-4].first_column);
break;
case 32:
 $$[$0-3].push({tipo: TIPO_DATO.BOOLEAN, identificador: $$[$0], linea:_$[$0-1].first_line, columna: _$[$0-1].first_column}); this.$ = $$[$0-3]; 
break;
case 34:
 this.$ = [{tipo: TIPO_DATO.BOOLEAN, identificador: $$[$0], linea:_$[$0-1].first_line, columna: _$[$0-1].first_column}]; 
break;
case 35: case 37:
this.$ = $$[$0-1];
break;
case 36: case 38:
this.$ = [];
break;
case 52:
 
					ubicacion = {
						first_line: _$[$0].first_line,
						first_column: _$[$0].first_column
					};
					this.$ = instruccionesAPI.parseError(_$[$0].yytext, ubicacion, "No se eseraba  ","Sintactico");
					console.log('Este es un error sintáctico: ' +  yytext + ', en la linea: ' + _$[$0].first_line + ', en la columna: ' + _$[$0].first_column);
					// Descartamos el token que generó el error y continuamos el análisis después del token PTCOMA

					
break;
case 63:
 
					ubicacion = {
						first_line: _$[$0].first_line,
						first_column: _$[$0].first_column
					};
					this.$ = instruccionesAPI.parseError(yytext, ubicacion, "No se eseraba  "+yytext,"Sintactico");
					console.log('Este es un error sintáctico: ' +  yytext + ', en la linea: ' + _$[$0].first_line + ', en la columna: ' + _$[$0].first_column);
					// Descartamos el token que generó el error y continuamos el análisis después del token PTCOMA

					
break;
case 64:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CADENA,_$[$0].first_line, _$[$0].first_column); 
break;
case 65:
 this.$ = instruccionesAPI.nuevoValor(Number($$[$0]), TIPO_VALOR.INT,_$[$0].first_line, _$[$0].first_column); 
break;
case 66:
 this.$ = instruccionesAPI.nuevoValor(Number($$[$0]), TIPO_VALOR.DOUBLE,_$[$0].first_line, _$[$0].first_column); 
break;
case 67:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.BOOLEAN,_$[$0].first_line, _$[$0].first_column); 
break;
case 68:
 this.$ = instruccionesAPI.nuevoValor($$[$0].charAt(0), TIPO_VALOR.CARACTER,_$[$0].first_line, _$[$0].first_column); 
break;
case 69:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.IDENTIFICADOR,_$[$0].first_line, _$[$0].first_column); 
break;
case 70:
 this.$ = instruccionesAPI.nuevoOperacionUnaria($$[$0], TIPO_EXPRESION.NEGATIVO,_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 71:
  if ($$[$0-2].tipo === TIPO_VALOR.CADENA || $$[$0].tipo == TIPO_VALOR.CADENA||($$[$0-2].tipo === TIPO_VALOR.CARACTER && $$[$0].tipo == TIPO_VALOR.CARACTER)) {
																this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_EXPRESION.CONCATENACION,_$[$0-2].first_line, _$[$0-2].first_column);
															} else {
																this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_EXPRESION.SUMA,_$[$0-2].first_line, _$[$0-2].first_column);
															}
														
break;
case 72:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_EXPRESION.RESTA,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 73:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_EXPRESION.MULTIPLICACION,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 74:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_EXPRESION.DIVISION,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 75:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_EXPRESION.POTENCIA,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 76:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_EXPRESION.MODULO,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 80:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_EXPRESION.MAYOR_QUE,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 81:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_EXPRESION.MENOR_QUE,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 82:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_EXPRESION.MAYOR_IGUAL,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 83:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_EXPRESION.MENOR_IGUAL,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 84:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_EXPRESION.DOBLE_IGUAL,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 85:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_EXPRESION.NO_IGUAL,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 86:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_EXPRESION.AND,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 87:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_EXPRESION.OR,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 88:
 this.$ = instruccionesAPI.nuevoOperacionUnaria($$[$0], TIPO_EXPRESION.NOT,_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 92:
 this.$ = {tipo: TIPO_DATO.INT, identificador: $$[$0], linea:_$[$0].first_line, columna: _$[$0].first_column}; 
break;
case 93:
 this.$ = {tipo: TIPO_DATO.DOUBLE, identificador: $$[$0], linea:_$[$0-1].first_line, columna: _$[$0-1].first_column}; 
break;
case 94:
 this.$ = {tipo: TIPO_DATO.CHAR, identificador: $$[$0], linea:_$[$0-1].first_line, columna: _$[$0-1].first_column}; 
break;
case 95:
 this.$ = {tipo: TIPO_DATO.STRING, identificador: $$[$0], linea:_$[$0-1].first_line, columna: _$[$0-1].first_column}; 
break;
case 96:
 this.$ = instruccionesAPI.nuevoPRINT($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 97:
 this.$ = instruccionesAPI.nuevoIf($$[$0-4], $$[$0-1],_$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 98:
 this.$ = instruccionesAPI.nuevoIfElse($$[$0-8], $$[$0-5], $$[$0-1],_$[$0-10].first_line, _$[$0-10].first_column); 
break;
case 99:
 this.$ = instruccionesAPI.nuevoIfElse($$[$0-6], $$[$0-3], $$[$0],_$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 100:
 this.$ = instruccionesAPI.nuevoSwitch($$[$0-4],$$[$0-1],_$[$0-6].first_line, _$[$0-6].first_column);
break;
case 101:
$$[$0-1].push($$[$0]);this.$ = $$[$0-1]; 
break;
case 102:
 this.$ = instruccionesAPI.nuevoListaCasos($$[$0]);
break;
case 103:
 this.$ = instruccionesAPI.nuevoCaso($$[$0-2],$$[$0],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 104:
 this.$ = instruccionesAPI.nuevoCasoDef($$[$0],_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 106:
 this.$ = instruccionesAPI.nuevoOperacionTernario($$[$0-4], $$[$0-2],$$[$0],_$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 107: case 108:
this.$ = instruccionesAPI.nuevoReturn($$[$0-1],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 109:
 this.$ = instruccionesAPI.nuevoBreak(); 
break;
case 110:
 this.$ = instruccionesAPI.nuevoWHILE($$[$0-4], $$[$0-1],_$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 111:
 this.$ = instruccionesAPI.nuevoDOWHILE($$[$0-6], $$[$0-2],_$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 112:
 this.$ = instruccionesAPI.nuevoPara($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1],_$[$0-10].first_line, _$[$0-10].first_column) 
break;
case 117:
this.$ = instruccionesAPI.nuevoAumDec("INCREMENTO", $$[$0-1],_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 118:
this.$ = instruccionesAPI.nuevoAumDec("DECREMENTO", $$[$0-1],_$[$0-1].first_line, _$[$0-1].first_column);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:10,14:$V1,15:$V2,20:$V3,28:$V4,65:$V5,66:$V6,67:$V7,68:$V8},{1:[3]},{2:$V0,5:[1,19],6:20,7:4,9:5,10:6,11:7,12:8,13:10,14:$V1,15:$V2,20:$V3,28:$V4,65:$V5,66:$V6,67:$V7,68:$V8},o($V9,[2,3]),{8:[1,21]},{8:[1,22]},{8:[1,23]},o($V9,[2,7]),o($V9,[2,8]),o($V9,[2,9]),{8:$Va,16:$Vb,22:[1,25]},{15:[1,26]},{16:$Vc},{15:[1,29],21:28},{15:[1,30]},{15:[1,31]},{15:[1,32]},{15:[1,33]},{15:[1,34]},{1:[2,1]},o($V9,[2,2]),o($V9,[2,4]),o($V9,[2,5]),o($V9,[2,6]),{8:$Vd,15:$Ve,17:35,18:36,19:47,21:45,22:$Vf,40:46,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,54:50,61:48,64:$Vm},{13:53,14:$Vn,23:[1,51],27:52,65:$V5,66:$V6,67:$V7,68:$V8},{8:$Vo,15:[1,57],16:$Vp,22:[1,56]},{8:$Vd,15:$Ve,17:58,18:60,19:59,21:45,22:$Vf,40:46,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,54:50,61:48,64:$Vm},{8:[2,20]},{22:$Vq},{22:[1,62]},o($Vr,[2,92]),o($Vr,[2,93]),o($Vr,[2,94]),o($Vr,[2,95]),o($Vs,$Vt,{8:[2,12],48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF}),{8:[2,13]},o($VG,[2,64]),o($VG,[2,65]),o($VG,[2,66]),o($VG,[2,67]),o($VG,[2,68]),o($VG,[2,69],{22:$Vq,86:$VH,87:$VI}),{15:$Ve,17:77,21:45,22:$Vf,40:46,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl},{15:$Ve,17:78,21:45,22:$Vf,40:46,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl},o($VG,[2,78]),o($VG,[2,79]),o([8,62,63],$VJ,{78:$VK}),{62:$VL,63:$VM},{15:$Ve,17:84,19:83,21:45,22:$Vf,40:46,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,54:50,61:82,64:$Vm},o($VN,[2,89]),{26:85,30:$VO},{23:[1,87],25:$VP},o($VQ,[2,33]),{15:[1,89]},{8:$Vd,15:$Ve,17:90,18:92,19:91,21:45,22:$Vf,40:46,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,54:50,61:48,64:$Vm},{23:[1,93]},{22:[1,94]},o($Vs,$Vt,{8:[2,17],48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF}),o($Vs,$VJ,{8:[2,18],78:$VK}),{8:[2,19]},{15:$Ve,17:97,21:45,22:$Vf,23:[1,95],24:96,40:46,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl},{13:53,14:$Vn,23:[1,98],27:99,65:$V5,66:$V6,67:$V7,68:$V8},{15:$Ve,17:100,21:45,22:$Vf,40:46,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl},{15:$Ve,17:101,21:45,22:$Vf,40:46,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl},{15:$Ve,17:102,21:45,22:$Vf,40:46,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl},{15:$Ve,17:103,21:45,22:$Vf,40:46,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl},{15:$Ve,17:104,21:45,22:$Vf,40:46,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl},{15:$Ve,17:105,21:45,22:$Vf,40:46,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl},{15:$Ve,17:106,21:45,22:$Vf,40:46,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl},{15:$Ve,17:107,21:45,22:$Vf,40:46,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl},{15:$Ve,17:108,21:45,22:$Vf,40:46,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl},{15:$Ve,17:109,21:45,22:$Vf,40:46,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl},{15:$Ve,17:110,21:45,22:$Vf,40:46,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl},{15:$Ve,17:111,21:45,22:$Vf,40:46,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl},o($VG,[2,117]),o($VG,[2,118]),o($VR,[2,70],{48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz}),{23:[1,112],48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz},{15:$Ve,17:113,21:45,22:$Vf,40:46,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl},{15:$Ve,17:84,19:83,21:45,22:$Vf,40:46,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,54:50,61:114,64:$Vm},{15:$Ve,17:84,19:83,21:45,22:$Vf,40:46,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,54:50,61:115,64:$Vm},o([8,23,78],[2,88],{62:$VL,63:$VM}),o($VN,$VJ),o($VN,$Vt,{48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF}),o($V9,[2,25]),{2:$VS,7:119,9:120,13:130,14:$VT,15:$VU,21:121,32:[1,117],33:116,35:118,36:122,37:123,38:124,39:125,40:127,41:128,42:126,65:$V5,66:$V6,67:$V7,68:$V8,69:$VV,70:$VW,72:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01},{26:141,30:$VO},{13:142,14:[1,143],65:$V5,66:$V6,67:$V7,68:$V8},o($VQ,[2,34]),o($Vs,$Vt,{8:[2,14],48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF}),o($Vs,$VJ,{8:[2,15],78:$VK}),{8:[2,16]},{26:144,30:$VO},{13:53,14:$Vn,27:145,65:$V5,66:$V6,67:$V7,68:$V8},o($VG,[2,21]),{23:[1,146],25:[1,147]},o($VQ,[2,24],{48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz}),{29:148,30:$V11},{23:[1,150],25:$VP},o($VG,[2,71]),o($VG,[2,72]),o($V21,[2,73],{48:$Vu,49:$Vv}),o($V21,[2,74],{48:$Vu,49:$Vv}),o($VR,[2,75],{48:$Vu,49:$Vv,50:$Vw,51:$Vx,53:$Vz}),o($V21,[2,76],{48:$Vu,49:$Vv}),o($VN,[2,80],{48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz}),o($VN,[2,81],{48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz}),o($VN,[2,82],{48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz}),o($VN,[2,83],{48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz}),o($VN,[2,84],{48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz}),o($VN,[2,85],{48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz}),o($VG,[2,77]),{48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,76:[1,151]},o([8,23,62,78],[2,86],{63:$VM}),o($VN,[2,87]),{2:$VS,7:119,9:120,13:130,14:$VT,15:$VU,21:121,32:[1,152],35:153,36:122,37:123,38:124,39:125,40:127,41:128,42:126,65:$V5,66:$V6,67:$V7,68:$V8,69:$VV,70:$VW,72:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01},o($V9,[2,38]),o($V31,[2,42]),{8:[1,154]},{8:[1,155]},{8:[1,156]},{8:[1,157]},o($V31,[2,57]),o($V31,[2,58]),o($V31,[2,59]),o($V31,[2,60]),{8:[1,158]},o($V31,[2,62]),o($V31,[2,63]),{8:$Va,16:$Vb},{15:[1,159]},{16:$Vc,22:$Vq,86:$VH,87:$VI},{22:[1,160]},{22:[1,161]},{22:[1,162]},{8:[1,163]},{8:$Vd,15:$Ve,17:84,18:165,19:47,21:45,22:$Vf,40:46,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,54:50,61:164,64:$Vm},{22:[1,166]},{30:[1,167]},{22:[1,168]},o($V9,[2,26]),o($VQ,[2,31]),{15:[1,169]},o($V9,[2,27]),{23:[1,170],25:$VP},o($VG,[2,22]),{15:$Ve,17:171,21:45,22:$Vf,40:46,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl},o($V9,[2,29]),{2:$V41,7:175,9:176,13:130,14:$VT,15:$VU,21:177,31:172,32:[1,173],34:174,36:178,37:179,38:180,39:181,40:182,41:183,65:$V5,66:$V6,67:$V7,68:$V8,69:$VV,70:$VW,72:$VX,80:$VZ,81:$V_,82:$V$,83:$V01},{29:185,30:$V11},{15:$Ve,17:186,21:45,22:$Vf,40:46,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl},o($V9,[2,37]),o($V31,[2,41]),o($V31,[2,53]),o($V31,[2,54]),o($V31,[2,55]),o($V31,[2,56]),o($V31,[2,61]),{8:$Vo,16:$Vp},{15:$Ve,17:187,21:45,22:$Vf,40:46,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl},{15:$Ve,17:84,19:188,21:45,22:$Vf,40:46,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,54:50,61:48,64:$Vm},{15:$Ve,17:189,21:45,22:$Vf,40:46,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl},o($V31,[2,109]),{8:[1,190],62:$VL,63:$VM},{8:[1,191]},{15:$Ve,17:84,19:192,21:45,22:$Vf,40:46,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,54:50,61:48,64:$Vm},{2:$VS,7:119,9:120,13:130,14:$VT,15:$VU,21:121,33:193,35:118,36:122,37:123,38:124,39:125,40:127,41:128,42:126,65:$V5,66:$V6,67:$V7,68:$V8,69:$VV,70:$VW,72:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01},{13:196,15:[1,195],65:$V5,66:$V6,67:$V7,68:$V8,84:194},o($VQ,[2,32]),{26:197,30:$VO},o($VQ,[2,23],{48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz}),{2:$V41,7:175,9:176,13:130,14:$VT,15:$VU,21:177,32:[1,198],34:199,36:178,37:179,38:180,39:181,40:182,41:183,65:$V5,66:$V6,67:$V7,68:$V8,69:$VV,70:$VW,72:$VX,80:$VZ,81:$V_,82:$V$,83:$V01},o($V9,[2,36]),o($V51,[2,40]),{8:[1,200]},{8:[1,201]},{8:[1,202]},{8:[1,203]},o($V51,[2,47]),o($V51,[2,48]),o($V51,[2,49]),{8:[1,204]},o($V51,[2,51]),o($V51,[2,52]),o($V9,[2,30]),{8:[2,106],48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz},{23:[1,205],48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz},o($Vs,$VJ,{23:[1,206]}),{23:[1,207],48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz},o($V31,[2,107]),o($V31,[2,108]),o($Vs,$VJ,{23:[1,208]}),{2:$VS,7:119,9:120,13:130,14:$VT,15:$VU,21:121,32:[1,209],35:153,36:122,37:123,38:124,39:125,40:127,41:128,42:126,65:$V5,66:$V6,67:$V7,68:$V8,69:$VV,70:$VW,72:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01},{8:[1,210]},{16:[1,211]},{16:[1,212]},o($V9,[2,28]),o($V9,[2,35]),o($V51,[2,39]),o($V51,[2,43]),o($V51,[2,44]),o($V51,[2,45]),o($V51,[2,46]),o($V51,[2,50]),{8:[2,96]},{30:[1,213]},{30:[1,214]},{30:[1,215]},{81:[1,216]},{15:$Ve,17:218,21:45,22:$Vf,40:46,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,54:217},{15:$Ve,17:219,21:45,22:$Vf,40:46,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl},{15:$Ve,17:220,21:45,22:$Vf,40:46,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl},{2:$VS,7:119,9:120,13:130,14:$VT,15:$VU,21:121,33:221,35:118,36:122,37:123,38:124,39:125,40:127,41:128,42:126,65:$V5,66:$V6,67:$V7,68:$V8,69:$VV,70:$VW,72:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01},{73:222,74:223,75:$V61,77:$V71},{2:$VS,7:119,9:120,13:130,14:$VT,15:$VU,21:121,33:226,35:118,36:122,37:123,38:124,39:125,40:127,41:128,42:126,65:$V5,66:$V6,67:$V7,68:$V8,69:$VV,70:$VW,72:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01},{22:[1,227]},{8:[1,228]},{48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF},{8:[2,113],48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz},{8:[2,114],48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz},{2:$VS,7:119,9:120,13:130,14:$VT,15:$VU,21:121,32:[1,229],35:153,36:122,37:123,38:124,39:125,40:127,41:128,42:126,65:$V5,66:$V6,67:$V7,68:$V8,69:$VV,70:$VW,72:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01},{32:[1,230],74:231,75:$V61,77:$V71},o($V81,[2,102]),{15:$Ve,17:232,21:45,22:$Vf,40:46,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl},{76:[1,233]},{2:$VS,7:119,9:120,13:130,14:$VT,15:$VU,21:121,32:[1,234],35:153,36:122,37:123,38:124,39:125,40:127,41:128,42:126,65:$V5,66:$V6,67:$V7,68:$V8,69:$VV,70:$VW,72:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01},{15:$Ve,17:84,19:235,21:45,22:$Vf,40:46,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,54:50,61:48,64:$Vm},{15:[1,237],40:238,85:236},o($V31,[2,97],{71:[1,239]}),o($V31,[2,100]),o($V81,[2,101]),{48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,76:[1,240]},{2:$VS,7:119,9:120,13:130,14:$VT,15:$VU,21:121,33:241,35:118,36:122,37:123,38:124,39:125,40:127,41:128,42:126,65:$V5,66:$V6,67:$V7,68:$V8,69:$VV,70:$VW,72:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01},o($V31,[2,110]),o($Vs,$VJ,{23:[1,242]}),{23:[1,243]},{16:[1,244],86:$VH,87:$VI},{23:[2,116]},{30:[1,245],37:246,70:$VW},{2:$VS,7:119,9:120,13:130,14:$VT,15:$VU,21:121,33:247,35:118,36:122,37:123,38:124,39:125,40:127,41:128,42:126,65:$V5,66:$V6,67:$V7,68:$V8,69:$VV,70:$VW,72:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01},o($V81,[2,104],{7:119,9:120,21:121,36:122,37:123,38:124,39:125,42:126,40:127,41:128,13:130,35:153,2:$VS,14:$VT,15:$VU,65:$V5,66:$V6,67:$V7,68:$V8,69:$VV,70:$VW,72:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01}),{8:[1,248]},{30:[1,249]},{15:$Ve,17:250,21:45,22:$Vf,40:46,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl},{2:$VS,7:119,9:120,13:130,14:$VT,15:$VU,21:121,33:251,35:118,36:122,37:123,38:124,39:125,40:127,41:128,42:126,65:$V5,66:$V6,67:$V7,68:$V8,69:$VV,70:$VW,72:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01},o($V31,[2,99]),o($V81,[2,103],{7:119,9:120,21:121,36:122,37:123,38:124,39:125,42:126,40:127,41:128,13:130,35:153,2:$VS,14:$VT,15:$VU,65:$V5,66:$V6,67:$V7,68:$V8,69:$VV,70:$VW,72:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01}),o($V31,[2,111]),{2:$VS,7:119,9:120,13:130,14:$VT,15:$VU,21:121,33:252,35:118,36:122,37:123,38:124,39:125,40:127,41:128,42:126,65:$V5,66:$V6,67:$V7,68:$V8,69:$VV,70:$VW,72:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01},{23:[2,115],48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz},{2:$VS,7:119,9:120,13:130,14:$VT,15:$VU,21:121,32:[1,253],35:153,36:122,37:123,38:124,39:125,40:127,41:128,42:126,65:$V5,66:$V6,67:$V7,68:$V8,69:$VV,70:$VW,72:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01},{2:$VS,7:119,9:120,13:130,14:$VT,15:$VU,21:121,32:[1,254],35:153,36:122,37:123,38:124,39:125,40:127,41:128,42:126,65:$V5,66:$V6,67:$V7,68:$V8,69:$VV,70:$VW,72:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01},o($V31,[2,98]),o($V31,[2,112])],
defaultActions: {19:[2,1],28:[2,20],36:[2,13],60:[2,19],92:[2,16],205:[2,96],238:[2,116]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const TIPO_EXPRESION	= require('./instrucciones').TIPO_EXPRESION;
	const TIPO_INSTRUCCION =require('./instrucciones').TIPO_INSTRUCCION;
	const TIPO_VALOR 		= require('./instrucciones').TIPO_VALOR;
	const TIPO_DATO			= require('./tabla_simbolos').TIPO_DATO; 
	
	const instruccionesAPI	= require('./instrucciones').instruccionesAPI;
	let ubicacion;
let prevToken = '';
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// se ignoran saltos de linea
break;
case 2:// comentario simple línea
break;
case 3:// comentario multiple líneas
break;
case 4:return 65; //ya
break;
case 5:return 66; //ya
break;
case 6:return 14; //ya
break;
case 7:return 67; //ya
break;
case 8:return 68; //ya
break;
case 9:return 72; //ya
break;
case 10:return 75; //ya
break;
case 11:return 77; //ya
break;
case 12:return 70; //ya
break;
case 13:return 71; //ya
break;
case 14:return 82;
break;
case 15:return 81;
break;
case 16:return 83;
break;
case 17:return 'T_LIST';
break;
case 18:return 'T_ADD';
break;
case 19:return 'T_NEW';
break;
case 20:return 80; //ya
break;
case 21:return 'T_CONTINUE';
break;
case 22:return 79; //ya
break;
case 23:return 69; //ya
break;
case 24:return 28; //ya
break;
case 25:return 'T_LENGTH';
break;
case 26:return 'T_TOCHARARRAY';
break;
case 27:return 'T_TOLOWER';
break;
case 28:return 'T_TOSTRING';
break;
case 29:return 'T_TOUPPER';
break;
case 30:return 'T_TRUNCATE';
break;
case 31:return 'T_TYPEOF';
break;
case 32:return 'T_ROUND';
break;
case 33:return 20; //ya
break;
case 34:return 58;
break;
case 35:return 57;
break;
case 36:return 59;
break;
case 37:return 60;
break;
case 38:return 56;
break;
case 39:return 55;
break;
case 40:return 76;
break;
case 41:return 8;
break;
case 42:return 30;
break;
case 43:return 32;
break;
case 44:return 22;
break;
case 45:return 23;
break;
case 46:return 16;
break;
case 47:return 'PTS';
break;
case 48:return 25;
break;
case 49:return 78;
break;
case 50:return 'CORCDER';
break;
case 51:return 'CORCIZQ';  
break;
case 52:return 'CORCDER';
break;
case 53:return 64;
break;
case 54:return 62
break;
case 55:return 63;
break;
case 56:return 86;
break;
case 57:return 87;
break;
case 58:return 49;
break;
case 59:return 48;
break;
case 60:return 50;
break;
case 61:return 51;
break;
case 62:return 52;
break;
case 63:return 53;
break;
case 64:return 45;
break;
case 65:return 44;
break;
case 66:return 46;
break;
case 67:return 46;
break;
case 68:
    yy_.yytext = yy_.yytext.toLowerCase();
    return 15;

break;
case 69: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2).toLowerCase(); return 47; 
break;
case 70:
    yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);
    yy_.yytext = yy_.yytext.replace(/\\\\/g, '\\');
    yy_.yytext = yy_.yytext.replace(/\\n/g, '\n');
    yy_.yytext = yy_.yytext.replace(/\\t/g, '\t');
    yy_.yytext = yy_.yytext.replace(/\\"/g, '\"');
    yy_.yytext = yy_.yytext.replace(/\\'/g, '\'');
    return 43;

break;
case 71:return 5;
break;
case 72: console.log('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
						$$ = instruccionesAPI.parseError(yy_.yytext, yy_.yylloc, yy,"lexico");
					
break;
}
},
rules: [/^(?:[\s\r\t]+)/i,/^(?:\n)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:list\b)/i,/^(?:add\b)/i,/^(?:new\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:print\b)/i,/^(?:void\b)/i,/^(?:length\b)/i,/^(?:tochararray\b)/i,/^(?:tolower\b)/i,/^(?:tostring\b)/i,/^(?:toupper\b)/i,/^(?:truncate\b)/i,/^(?:typeof\b)/i,/^(?:round\b)/i,/^(?:main\b)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?::)/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:=)/i,/^(?:\.)/i,/^(?:,)/i,/^(?:\?)/i,/^(?:\])/i,/^(?:\[)/i,/^(?:\])/i,/^(?:!)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:[0-9]+\.[0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:'[^\']')/i,/^(?:"(\\.|[^"\\])*")/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}